{"remainingRequest":"/Users/tomas/Desktop/hello-vue/node_modules/babel-loader/lib/index.js!/Users/tomas/Desktop/hello-vue/node_modules/eslint-loader/index.js??ref--13-0!/Users/tomas/Desktop/hello-vue/src/store/modules/auth/actions.js","dependencies":[{"path":"/Users/tomas/Desktop/hello-vue/src/store/modules/auth/actions.js","mtime":1618687128974},{"path":"/Users/tomas/Desktop/hello-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomas/Desktop/hello-vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tomas/Desktop/hello-vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/tomas/Desktop/hello-vue/src/store/modules/auth/actions.js"],"names":["cred","timer","login","context","payload","url","dev","url_login","fetch","method","headers","redirect","referrerPolicy","body","JSON","stringify","email","password","response","json","responseData","ok","code","Error","message","status","expiresIn","expirationDate","Date","getTime","localStorage","setItem","token","setTimeout","dispatch","commit","userId","register","_","url_register","console","log","cache","credentials","enctype","name","surname","resetPassword","url_reset_password","changePassword","url_change_password","tryLogin","getItem","tokenExpiration","expiredIn","logout","removeItem","clearTimeout","autoLogOut"],"mappings":"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","sourcesContent":["import cred from '../../cred.js'\n\nlet timer\n\nexport default {\n    /**Login method\n     * \n     * @param {*} context \n     * @param {*} payload \n     */\n    async login(context, payload) {\n\n        let url = cred.dev.url_login\n\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer',\n            body: JSON.stringify({\n                email: payload.email,\n                password: payload.password\n            })\n        });\n        const responseData = await response.json()\n\n        if (!response.ok) {\n            if (responseData.code === 401) {\n                throw new Error(responseData.message)\n            } else\n                throw new Error(\"Request failed with error code: \" + response.status)\n\n        }\n        // qui tutto ok \n\n\n        // responseData.expiresIn = 3600 ,,, è in secondi [* 100 per ottenere millisecondi]\n        const expiresIn = +responseData.expiresIn * 1000\n            //  const expiresIn = 5000\n            // gets the time in milliseconds\n        const expirationDate = new Date().getTime() + expiresIn\n\n\n        localStorage.setItem('token', responseData.token)\n        localStorage.setItem('userId', responseData.email)\n        localStorage.setItem('tokenExpiration', expirationDate)\n\n\n        // dopo questo tempo 'expiresIn', la funzione viene eseguita\n        // Una volta logout, pulisco il timer con clearTimeout\n        timer = setTimeout(() => {\n            context.dispatch('autoLogOut')\n        }, expiresIn);\n\n\n        context.commit('setUser', {\n            token: responseData.token,\n            userId: responseData.email,\n        })\n\n\n    },\n\n\n    /**\n     * register method\n     * @param {*} _ \n     * @param {*} payload \n     */\n    async register(_, payload) {\n\n        let url = cred.dev.url_register\n        console.log(payload)\n        const response = await fetch(url, {\n            method: 'POST',\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer',\n            enctype: 'mutipart/form-data',\n            body: JSON.stringify({\n                name: payload.name,\n                surname: payload.surname,\n                email: payload.email,\n                password: payload.password\n            })\n        });\n        const responseData = await response.json()\n\n        if (!response.ok) {\n            if (responseData.code === 409) {\n                throw new Error(responseData.message)\n            } else\n                throw new Error(\"Request failed with error code: \" + response.status)\n\n        }\n\n\n    },\n\n\n\n\n\n    async resetPassword(_, payload) {\n\n        let url = cred.dev.url_reset_password\n\n        console.log(payload)\n        const response = await fetch(url, {\n            method: 'POST',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer',\n            enctype: 'mutipart/form-data',\n\n            body: JSON.stringify({\n                email: payload.email,\n            })\n        });\n        const responseData = await response.json()\n\n        if (!response.ok) {\n            throw new Error(responseData.message)\n        }\n    },\n    async changePassword(_, payload) {\n\n\n        let url = cred.dev.url_change_password\n\n        console.log(payload)\n        const response = await fetch(url, {\n            method: 'POST',\n            cache: 'no-cache',\n            credentials: 'same-origin',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            redirect: 'follow',\n            referrerPolicy: 'no-referrer',\n            enctype: 'mutipart/form-data',\n\n            body: JSON.stringify({\n                email: payload.email,\n                password: payload.password\n            })\n        });\n\n        if (!response.ok) {\n            throw new Error(\"Request failed with error code: \" + response.status)\n        }\n\n\n    },\n\n\n\n\n\n    /**\n     * Get calls in every page riload\n     * @param {*} _ \n     * @param {*} payload \n     */\n    async tryLogin(context) {\n        const token = localStorage.getItem('token')\n        const userId = localStorage.getItem('userId')\n        const tokenExpiration = localStorage.getItem('tokenExpiration')\n\n        // prendo la differenza per capire se il token è scaduto\n        const expiredIn = +tokenExpiration - new Date().getTime();\n\n        if (expiredIn < 0) {\n            return\n        }\n\n        timer = setTimeout(() => {\n            context.dispatch('autoLogOut')\n        }, expiredIn)\n\n        if (token && userId) {\n            context.commit('setUser', {\n                token: token,\n                userId: userId,\n            })\n        }\n    },\n\n    /**\n     * Logs the user out\n     * @param {*} context \n     */\n    logout(context) {\n\n        localStorage.removeItem('token')\n        localStorage.removeItem('userId')\n        localStorage.removeItem('tokenExpiration')\n\n        clearTimeout(timer)\n\n        context.commit('setUser', {\n            token: null,\n            userId: null\n\n        })\n\n    },\n    autoLogOut(context) {\n        // chiama il metodo qui sopra 'logout\n        context.dispatch('logout')\n            // mette didAutoLogout = true nel index.js\n        context.commit('setAutoLogout')\n    }\n\n\n\n}"]}]}